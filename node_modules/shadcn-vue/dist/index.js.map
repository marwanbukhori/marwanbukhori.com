{"version":3,"sources":["../src/index.ts","../src/commands/add.ts","../src/utils/get-config.ts","../src/utils/resolve-import.ts","../src/utils/handle-error.ts","../src/utils/registry/index.ts","../src/utils/registry/schema.ts","../src/utils/transformers/transform-css-vars.ts","../src/utils/transformers/transform-import.ts","../src/utils/transformers/transform-sfc.ts","../src/utils/transformers/transform-tw-prefix.ts","../src/utils/transformers/index.ts","../src/commands/diff.ts","../src/commands/init.ts","../src/utils/get-project-info.ts","../src/utils/templates.ts","../src/utils/transformers/transform-cjs-to-esm.ts","../src/utils/get-package-info.ts"],"sourcesContent":["#!/usr/bin/env node\nimport process from 'node:process'\n\nimport { add } from '@/src/commands/add'\n\nimport { diff } from '@/src/commands/diff'\nimport { init } from '@/src/commands/init'\nimport { getPackageInfo } from '@/src/utils/get-package-info'\nimport { Command } from 'commander'\n\nprocess.on('SIGINT', () => process.exit(0))\nprocess.on('SIGTERM', () => process.exit(0))\n\nasync function main() {\n  const packageInfo = await getPackageInfo()\n\n  const program = new Command()\n    .name('shadcn-vue')\n    .description('add components and dependencies to your project')\n    .version(\n      packageInfo.version || '1.0.0',\n      '-v, --version',\n      'display the version number',\n    )\n\n  program.addCommand(init).addCommand(add).addCommand(diff)\n\n  program.parse()\n}\n\nmain()\n","import { existsSync, promises as fs, rmSync } from 'node:fs'\nimport process from 'node:process'\nimport { getConfig } from '@/src/utils/get-config'\nimport { handleError } from '@/src/utils/handle-error'\nimport {\n  fetchTree,\n  getItemTargetPath,\n  getRegistryBaseColor,\n  getRegistryIndex,\n  resolveTree,\n} from '@/src/utils/registry'\nimport { transform } from '@/src/utils/transformers'\nimport { Command } from 'commander'\nimport { consola } from 'consola'\nimport { colors } from 'consola/utils'\nimport { addDependency, addDevDependency } from 'nypm'\nimport ora from 'ora'\nimport path from 'pathe'\nimport prompts from 'prompts'\nimport { z } from 'zod'\n\nconst addOptionsSchema = z.object({\n  components: z.array(z.string()).optional(),\n  yes: z.boolean(),\n  overwrite: z.boolean(),\n  cwd: z.string(),\n  all: z.boolean(),\n  path: z.string().optional(),\n})\n\nexport const add = new Command()\n  .name('add')\n  .description('add a component to your project')\n  .argument('[components...]', 'the components to add')\n  .option('-y, --yes', 'skip confirmation prompt.', true)\n  .option('-o, --overwrite', 'overwrite existing files.', false)\n  .option(\n    '-c, --cwd <cwd>',\n    'the working directory. defaults to the current directory.',\n    process.cwd(),\n  )\n  .option('-a, --all', 'add all available components', false)\n  .option('-p, --path <path>', 'the path to add the component to.')\n  .action(async (components, opts) => {\n    try {\n      const options = addOptionsSchema.parse({\n        components,\n        ...opts,\n      })\n\n      const cwd = path.resolve(options.cwd)\n\n      if (!existsSync(cwd)) {\n        consola.error(`The path ${cwd} does not exist. Please try again.`)\n        process.exit(1)\n      }\n\n      const config = await getConfig(cwd)\n\n      if (!config) {\n        consola.warn(`Configuration is missing. Please run ${colors.green('init')} to create a components.json file.`)\n\n        process.exit(1)\n      }\n\n      const registryIndex = await getRegistryIndex()\n\n      let selectedComponents = options.all\n        ? registryIndex.map(entry => entry.name)\n        : options.components\n      if (!options.components?.length && !options.all) {\n        const { components } = await prompts({\n          type: 'multiselect',\n          name: 'components',\n          message: 'Which components would you like to add?',\n          hint: 'Space to select. A to toggle all. Enter to submit.',\n          instructions: false,\n          choices: registryIndex.map(entry => ({\n            title: entry.name,\n            value: entry.name,\n            selected: options.all\n              ? true\n              : options.components?.includes(entry.name),\n          })),\n        })\n        selectedComponents = components\n      }\n\n      if (!selectedComponents?.length) {\n        consola.warn('No components selected. Exiting.')\n        process.exit(0)\n      }\n\n      const tree = await resolveTree(registryIndex, selectedComponents)\n      const payload = await fetchTree(config.style, tree)\n      const baseColor = await getRegistryBaseColor(config.tailwind.baseColor)\n\n      if (!payload.length) {\n        consola.warn('Selected components not found. Exiting.')\n        process.exit(0)\n      }\n\n      if (!options.yes) {\n        const { proceed } = await prompts({\n          type: 'confirm',\n          name: 'proceed',\n          message: 'Ready to install components and dependencies. Proceed?',\n          initial: true,\n        })\n\n        if (!proceed)\n          process.exit(0)\n      }\n\n      const spinner = ora('Installing components...').start()\n      for (const item of payload) {\n        spinner.text = `Installing ${item.name}...`\n        const targetDir = getItemTargetPath(\n          config,\n          item,\n          options.path ? path.resolve(cwd, options.path) : undefined,\n        )\n\n        if (!targetDir)\n          continue\n\n        if (!existsSync(targetDir))\n          await fs.mkdir(targetDir, { recursive: true })\n\n        const existingComponent = item.files.filter(file =>\n          existsSync(path.resolve(targetDir, item.name, file.name)),\n        )\n\n        if (existingComponent.length && !options.overwrite) {\n          if (selectedComponents.includes(item.name)) {\n            spinner.stop()\n            const { overwrite } = await prompts({\n              type: 'confirm',\n              name: 'overwrite',\n              message: `Component ${item.name} already exists. Would you like to overwrite?`,\n              initial: false,\n            })\n\n            if (!overwrite) {\n              consola.info(\n                `Skipped ${item.name}. To overwrite, run with the ${colors.green(\n                  '--overwrite',\n                )} flag.`,\n              )\n              continue\n            }\n\n            spinner.start(`Installing ${item.name}...`)\n          }\n          else {\n            continue\n          }\n        }\n\n        // Install dependencies.\n        await Promise.allSettled(\n          [\n            item.dependencies?.length && await addDependency(item.dependencies, {\n              cwd,\n              silent: true,\n            }),\n            item.devDependencies?.length && await addDevDependency(item.devDependencies, {\n              cwd,\n              silent: true,\n            }),\n          ],\n        )\n\n        const componentDir = path.resolve(targetDir, item.name)\n        if (!existsSync(componentDir))\n          await fs.mkdir(componentDir, { recursive: true })\n\n        const files = item.files.map(file => ({\n          ...file,\n          path: path.resolve(\n            targetDir,\n            item.name,\n            file.name,\n          ),\n        }))\n\n        // We need to write original files to disk if we're not using TypeScript.\n        // Rewrite or delete added files after transformed\n        if (!config.typescript) {\n          for (const file of files)\n            await fs.writeFile(file.path, file.content)\n        }\n\n        for (const file of files) {\n          // Run transformers.\n          const content = await transform({\n            filename: file.path,\n            raw: file.content,\n            config,\n            baseColor,\n          })\n\n          let filePath = file.path\n\n          if (!config.typescript) {\n            // remove original .ts file if we're not using TypeScript.\n            if (file.path.endsWith('.ts')) {\n              if (existsSync(file.path))\n                rmSync(file.path)\n            }\n            filePath = file.path.replace(/\\.ts$/, '.js')\n          }\n\n          await fs.writeFile(filePath, content)\n        }\n      }\n      spinner.succeed('Done.')\n    }\n    catch (error) {\n      handleError(error)\n    }\n  })\n","import type { ConfigLoaderResult } from 'tsconfig-paths'\nimport { existsSync } from 'node:fs'\nimport { resolveImport } from '@/src/utils/resolve-import'\nimport { loadConfig as c12LoadConfig } from 'c12'\nimport path from 'pathe'\nimport { loadConfig } from 'tsconfig-paths'\nimport { z } from 'zod'\n\nexport const DEFAULT_STYLE = 'default'\nexport const DEFAULT_COMPONENTS = '@/components'\nexport const DEFAULT_UTILS = '@/lib/utils'\nexport const DEFAULT_TYPESCRIPT_CONFIG = './tsconfig.json'\nexport const DEFAULT_TAILWIND_CONFIG = 'tailwind.config.js'\nexport const DEFAULT_TAILWIND_BASE_COLOR = 'slate'\n\nexport const TAILWIND_CSS_PATH = {\n  nuxt: 'assets/css/tailwind.css',\n  vite: 'src/assets/index.css',\n  laravel: 'resources/css/app.css',\n  astro: 'src/styles/globals.css',\n}\n\nexport const rawConfigSchema = z\n  .object({\n    $schema: z.string().optional(),\n    style: z.string(),\n    typescript: z.boolean().default(true),\n    tsConfigPath: z.string().default(DEFAULT_TYPESCRIPT_CONFIG),\n    tailwind: z.object({\n      config: z.string(),\n      css: z.string(),\n      baseColor: z.string(),\n      cssVariables: z.boolean().default(true),\n      prefix: z.string().optional(),\n    }),\n    framework: z.string().default('Vite'),\n    aliases: z.object({\n      components: z.string(),\n      utils: z.string(),\n      ui: z.string().default('').optional(),\n    }),\n  })\n  .strict()\n\nexport type RawConfig = z.infer<typeof rawConfigSchema>\n\nexport const configSchema = rawConfigSchema\n  .extend({\n    resolvedPaths: z.object({\n      tailwindConfig: z.string(),\n      tailwindCss: z.string(),\n      utils: z.string(),\n      components: z.string(),\n      ui: z.string(),\n    }),\n  })\n\nexport type Config = z.infer<typeof configSchema>\n\nexport async function getConfig(cwd: string) {\n  const config = await getRawConfig(cwd)\n\n  if (!config)\n    return null\n\n  return await resolveConfigPaths(cwd, config)\n}\n\nexport async function resolveConfigPaths(cwd: string, config: RawConfig) {\n  let tsConfig: ConfigLoaderResult | undefined\n  let tsConfigPath = path.resolve(\n    cwd,\n    config.tsConfigPath,\n  )\n\n  if (config.typescript) {\n    // Read tsconfig.json.\n    tsConfig = loadConfig(tsConfigPath)\n    // In new Vue project, tsconfig has references to tsconfig.app.json, which is causing the path not resolving correctly\n    // If no paths were found, try to load tsconfig.app.json.\n    if ('paths' in tsConfig && Object.keys(tsConfig.paths).length === 0) {\n      tsConfigPath = path.resolve(cwd, './tsconfig.app.json')\n      if (existsSync(tsConfigPath))\n        tsConfig = loadConfig(tsConfigPath)\n    }\n  }\n  else {\n    tsConfigPath = config.tsConfigPath.includes('tsconfig.json') ? path.resolve(cwd, './jsconfig.json') : path.resolve(cwd, config.tsConfigPath)\n    tsConfig = loadConfig(tsConfigPath)\n  }\n  if (tsConfig.resultType === 'failed') {\n    throw new Error(\n      `Failed to load ${tsConfigPath}. ${tsConfig.message ?? ''}`.trim(),\n    )\n  }\n\n  return configSchema.parse({\n    ...config,\n    resolvedPaths: {\n      tailwindConfig: path.resolve(cwd, config.tailwind.config),\n      tailwindCss: path.resolve(cwd, config.tailwind.css),\n      utils: resolveImport(config.aliases.utils, tsConfig),\n      components: resolveImport(config.aliases.components, tsConfig),\n      ui: config.aliases.ui\n        ? resolveImport(config.aliases.ui, tsConfig)\n        : resolveImport(config.aliases.components, tsConfig),\n    },\n  })\n}\n\nexport async function getRawConfig(cwd: string): Promise<RawConfig | null> {\n  try {\n    const configResult = await c12LoadConfig({\n      name: 'components',\n      configFile: 'components.json',\n      cwd,\n    })\n\n    if (!configResult.config || Object.keys(configResult.config).length === 0)\n      return null\n\n    return rawConfigSchema.parse(configResult.config)\n  }\n  catch (error) {\n    throw new Error(`Invalid configuration found in ${cwd}/components.json.`)\n  }\n}\n","import { type ConfigLoaderSuccessResult, createMatchPath } from 'tsconfig-paths'\n\nexport function resolveImport(\n  importPath: string,\n  config: Pick<ConfigLoaderSuccessResult, 'absoluteBaseUrl' | 'paths'>,\n) {\n  return createMatchPath(config.absoluteBaseUrl, config.paths)(\n    importPath,\n    undefined,\n    () => true,\n    ['.ts', '.tsx', '.vue'],\n  )\n}\n","import { consola } from 'consola'\n\nexport function handleError(error: unknown) {\n  if (typeof error === 'string') {\n    consola.error(error)\n    process.exit(1)\n  }\n\n  if (error instanceof Error) {\n    consola.error(error.message)\n    process.exit(1)\n  }\n\n  consola.error('Something went wrong. Please try again.')\n  process.exit(1)\n}\n","import type { Config } from '@/src/utils/get-config'\nimport type { registryItemWithContentSchema } from '@/src/utils/registry/schema'\nimport type * as z from 'zod'\nimport process from 'node:process'\nimport {\n  registryBaseColorSchema,\n  registryIndexSchema,\n  registryWithContentSchema,\n  stylesSchema,\n} from '@/src/utils/registry/schema'\nimport consola from 'consola'\nimport { HttpsProxyAgent } from 'https-proxy-agent'\nimport { ofetch } from 'ofetch'\nimport path from 'pathe'\n\nconst baseUrl = process.env.COMPONENTS_REGISTRY_URL ?? 'https://www.shadcn-vue.com'\nconst agent = process.env.https_proxy\n  ? new HttpsProxyAgent(process.env.https_proxy)\n  : undefined\n\nexport async function getRegistryIndex() {\n  try {\n    const [result] = await fetchRegistry(['index.json'])\n\n    return registryIndexSchema.parse(result)\n  }\n  catch (error) {\n    throw new Error('Failed to fetch components from registry.')\n  }\n}\n\nexport async function getRegistryStyles() {\n  try {\n    const [result] = await fetchRegistry(['styles/index.json'])\n\n    return stylesSchema.parse(result)\n  }\n  catch (error) {\n    throw new Error('Failed to fetch styles from registry.')\n  }\n}\n\nexport function getRegistryBaseColors() {\n  return [\n    {\n      name: 'slate',\n      label: 'Slate',\n    },\n    {\n      name: 'gray',\n      label: 'Gray',\n    },\n    {\n      name: 'zinc',\n      label: 'Zinc',\n    },\n    {\n      name: 'neutral',\n      label: 'Neutral',\n    },\n    {\n      name: 'stone',\n      label: 'Stone',\n    },\n  ]\n}\n\nexport async function getRegistryBaseColor(baseColor: string) {\n  try {\n    const [result] = await fetchRegistry([`colors/${baseColor}.json`])\n\n    return registryBaseColorSchema.parse(result)\n  }\n  catch (error) {\n    throw new Error('Failed to fetch base color from registry.')\n  }\n}\n\nexport async function resolveTree(\n  index: z.infer<typeof registryIndexSchema>,\n  names: string[],\n) {\n  const tree: z.infer<typeof registryIndexSchema> = []\n\n  for (const name of names) {\n    const entry = index.find(entry => entry.name === name)\n\n    if (!entry)\n      continue\n\n    tree.push(entry)\n\n    if (entry.registryDependencies) {\n      const dependencies = await resolveTree(index, entry.registryDependencies)\n      tree.push(...dependencies)\n    }\n  }\n\n  return tree.filter(\n    (component, index, self) =>\n      self.findIndex(c => c.name === component.name) === index,\n  )\n}\n\nexport async function fetchTree(\n  style: string,\n  tree: z.infer<typeof registryIndexSchema>,\n) {\n  try {\n    const paths = tree.map(item => `styles/${style}/${item.name}.json`)\n    const result = await fetchRegistry(paths)\n\n    return registryWithContentSchema.parse(result)\n  }\n  catch (error) {\n    throw new Error('Failed to fetch tree from registry.')\n  }\n}\n\nexport function getItemTargetPath(\n  config: Config,\n  item: Pick<z.infer<typeof registryItemWithContentSchema>, 'type'>,\n  override?: string,\n) {\n  // Allow overrides for all items but ui.\n  if (override)\n    return override\n\n  if (item.type === 'components:ui' && config.aliases.ui)\n    return config.resolvedPaths.ui\n\n  const [parent, type] = item.type.split(':')\n  if (!(parent in config.resolvedPaths))\n    return null\n\n  return path.join(\n    config.resolvedPaths[parent as keyof typeof config.resolvedPaths],\n    type,\n  )\n}\n\nasync function fetchRegistry(paths: string[]) {\n  try {\n    const results = await Promise.all(\n      paths.map(async (path) => {\n        const response = await ofetch(`${baseUrl}/registry/${path}`, {\n          // @ts-expect-error agent type\n          agent,\n        })\n\n        return response\n      }),\n    )\n    return results\n  }\n  catch (error) {\n    consola.error(error)\n    throw new Error(`Failed to fetch registry from ${baseUrl}.`)\n  }\n}\n","import { z } from 'zod'\n\n// TODO: Extract this to a shared package.\nexport const registryItemSchema = z.object({\n  name: z.string(),\n  dependencies: z.array(z.string()).optional(),\n  devDependencies: z.array(z.string()).optional(),\n  registryDependencies: z.array(z.string()).optional(),\n  files: z.array(z.string()),\n  type: z.enum(['components:ui', 'components:component', 'components:example']),\n})\n\nexport const registryIndexSchema = z.array(registryItemSchema)\n\nexport const registryItemWithContentSchema = registryItemSchema.extend({\n  files: z.array(\n    z.object({\n      name: z.string(),\n      content: z.string(),\n    }),\n  ),\n})\n\nexport const registryWithContentSchema = z.array(registryItemWithContentSchema)\n\nexport const stylesSchema = z.array(\n  z.object({\n    name: z.string(),\n    label: z.string(),\n  }),\n)\n\nexport const registryBaseColorSchema = z.object({\n  inlineColors: z.object({\n    light: z.record(z.string(), z.string()),\n    dark: z.record(z.string(), z.string()),\n  }),\n  cssVars: z.object({\n    light: z.record(z.string(), z.string()),\n    dark: z.record(z.string(), z.string()),\n  }),\n  inlineColorsTemplate: z.string(),\n  cssVarsTemplate: z.string(),\n})\n","import type { registryBaseColorSchema } from '@/src/utils/registry/schema'\nimport type { CodemodPlugin } from 'vue-metamorph'\nimport type * as z from 'zod'\nimport type { TransformOpts } from '.'\n\nexport function transformCssVars(opts: TransformOpts): CodemodPlugin {\n  return {\n    type: 'codemod',\n    name: 'add prefix to tailwind classes',\n\n    transform({ scriptASTs, sfcAST, utils: { traverseScriptAST, traverseTemplateAST } }) {\n      let transformCount = 0\n      const { baseColor, config } = opts\n\n      if (config.tailwind?.cssVariables || !baseColor?.inlineColors)\n        return transformCount\n\n      for (const scriptAST of scriptASTs) {\n        traverseScriptAST(scriptAST, {\n          visitLiteral(path) {\n            if (path.parent.value.type !== 'ImportDeclaration' && typeof path.node.value === 'string') {\n            // mutate the node\n              path.node.value = applyColorMapping(path.node.value.replace(/\"/g, ''), baseColor.inlineColors)\n              transformCount++\n            }\n\n            return this.traverse(path)\n          },\n        })\n      }\n\n      if (sfcAST) {\n        traverseTemplateAST(sfcAST, {\n          enterNode(node) {\n            if (node.type === 'Literal' && typeof node.value === 'string') {\n              if (!['BinaryExpression', 'Property'].includes(node.parent?.type ?? '')) {\n                node.value = applyColorMapping(node.value.replace(/\"/g, ''), baseColor.inlineColors)\n                transformCount++\n              }\n            }\n            // handle class attribute without binding\n            else if (node.type === 'VLiteral' && typeof node.value === 'string') {\n              if (node.parent.key.name === 'class') {\n                node.value = `\"${applyColorMapping(node.value.replace(/\"/g, ''), baseColor.inlineColors)}\"`\n                transformCount++\n              }\n            }\n          },\n          leaveNode() {\n\n          },\n        })\n      }\n\n      return transformCount\n    },\n  }\n}\n\n// Splits a className into variant-name-alpha.\n// eg. hover:bg-primary-100 -> [hover, bg-primary, 100]\nexport function splitClassName(className: string): (string | null)[] {\n  if (!className.includes('/') && !className.includes(':'))\n    return [null, className, null]\n\n  const parts: (string | null)[] = []\n  // First we split to find the alpha.\n  const [rest, alpha] = className.split('/')\n\n  // Check if rest has a colon.\n  if (!rest.includes(':'))\n    return [null, rest, alpha]\n\n  // Next we split the rest by the colon.\n  const split = rest.split(':')\n\n  // We take the last item from the split as the name.\n  const name = split.pop()\n\n  // We glue back the rest of the split.\n  const variant = split.join(':')\n\n  // Finally we push the variant, name and alpha.\n  parts.push(variant ?? null, name ?? null, alpha ?? null)\n\n  return parts\n}\n\nconst PREFIXES = ['bg-', 'text-', 'border-', 'ring-offset-', 'ring-']\n\nexport function applyColorMapping(\n  input: string,\n  mapping: z.infer<typeof registryBaseColorSchema>['inlineColors'],\n) {\n  // Handle border classes.\n  if (input.includes(' border '))\n    input = input.replace(' border ', ' border border-border ')\n\n  const classNames = input.split(' ')\n  const lightMode = new Set<string>()\n  const darkMode = new Set<string>()\n  for (const className of classNames) {\n    const [variant, value, modifier] = splitClassName(className)\n    const prefix = PREFIXES.find(prefix => value?.startsWith(prefix))\n    if (!prefix) {\n      if (!lightMode.has(className))\n        lightMode.add(className)\n\n      continue\n    }\n\n    const needle = value?.replace(prefix, '')\n    if (needle && needle in mapping.light) {\n      lightMode.add(\n        [variant, `${prefix}${mapping.light[needle]}`]\n          .filter(Boolean)\n          .join(':') + (modifier ? `/${modifier}` : ''),\n      )\n\n      darkMode.add(\n        ['dark', variant, `${prefix}${mapping.dark[needle]}`]\n          .filter(Boolean)\n          .join(':') + (modifier ? `/${modifier}` : ''),\n      )\n      continue\n    }\n\n    if (!lightMode.has(className))\n      lightMode.add(className)\n  }\n\n  return [...Array.from(lightMode), ...Array.from(darkMode)].join(' ').trim()\n}\n","import type { CodemodPlugin } from 'vue-metamorph'\nimport type { TransformOpts } from '.'\n\nexport function transformImport(opts: TransformOpts): CodemodPlugin {\n  return {\n    type: 'codemod',\n    name: 'modify import based on user config',\n\n    transform({ scriptASTs, utils: { traverseScriptAST } }) {\n      const transformCount = 0\n      const { config } = opts\n\n      for (const scriptAST of scriptASTs) {\n        traverseScriptAST(scriptAST, {\n          visitImportDeclaration(path) {\n            if (typeof path.node.source.value === 'string') {\n              const sourcePath = path.node.source.value\n\n              // Replace @/lib/registry/[style] with the components alias.\n              if (sourcePath.startsWith('@/lib/registry/')) {\n                if (config.aliases.ui) {\n                  path.node.source.value = sourcePath.replace(/^@\\/lib\\/registry\\/[^/]+\\/ui/, config.aliases.ui)\n                }\n                else {\n                  path.node.source.value = sourcePath.replace(/^@\\/lib\\/registry\\/[^/]+/, config.aliases.components)\n                }\n              }\n\n              // Replace `import { cn } from \"@/lib/utils\"`\n              if (sourcePath === '@/lib/utils') {\n                const namedImports = path.node.specifiers?.map(node => node.local?.name ?? '') ?? []\n                // const namedImports = importDeclaration.getNamedImports()\n                const cnImport = namedImports.find(i => i === 'cn')\n                if (cnImport) {\n                  path.node.source.value = sourcePath.replace(/^@\\/lib\\/utils/, config.aliases.utils)\n                }\n              }\n            }\n            return this.traverse(path)\n          },\n        })\n      }\n\n      return transformCount\n    },\n  }\n}\n","import type { TransformOpts } from '.'\nimport { transform } from '@unovue/detypes'\n\nexport async function transformSFC(opts: TransformOpts) {\n  if (opts.config?.typescript)\n    return opts.raw\n\n  return await transformByDetype(opts.raw, opts.filename).then(res => res as string)\n}\n\nexport async function transformByDetype(content: string, filename: string) {\n  return await transform(content, filename, {\n    removeTsComments: true,\n    prettierOptions: {\n      proseWrap: 'never',\n    },\n  })\n}\n","import type { CodemodPlugin } from 'vue-metamorph'\nimport type { TransformOpts } from '.'\nimport { splitClassName } from './transform-css-vars'\n\nexport function transformTwPrefix(opts: TransformOpts): CodemodPlugin {\n  return {\n    type: 'codemod',\n    name: 'add prefix to tailwind classes',\n\n    transform({ scriptASTs, sfcAST, utils: { traverseScriptAST, traverseTemplateAST, astHelpers } }) {\n      let transformCount = 0\n      const { config } = opts\n\n      const CLASS_IDENTIFIER = ['class', 'classes']\n\n      if (!config.tailwind?.prefix)\n        return transformCount\n\n      for (const scriptAST of scriptASTs) {\n        traverseScriptAST(scriptAST, {\n          visitCallExpression(path) {\n            if (path.node.callee.type === 'Identifier' && path.node.callee.name === 'cva') {\n              const nodes = path.node.arguments\n              nodes.forEach((node) => {\n                // cva(base, ...)\n                if (node.type === 'Literal' && typeof node.value === 'string') {\n                  node.value = applyPrefix(node.value, config.tailwind.prefix)\n                  transformCount++\n                }\n\n                else if (node.type === 'ObjectExpression') {\n                  node.properties.forEach((node) => {\n                    // cva(..., { variants: { ... } })\n                    if (node.type === 'Property' && node.key.type === 'Identifier' && node.key.name === 'variants') {\n                      const nodes = astHelpers.findAll(node, { type: 'Literal' })\n                      nodes.forEach((node) => {\n                        if (typeof node.value === 'string') {\n                          node.value = applyPrefix(node.value, config.tailwind.prefix)\n                          transformCount++\n                        }\n                      })\n                    }\n                  })\n                }\n              })\n            }\n            return this.traverse(path)\n          },\n        })\n      }\n\n      if (sfcAST) {\n        traverseTemplateAST(sfcAST, {\n          enterNode(node) {\n            if (node.type === 'VAttribute' && node.key.type === 'VDirectiveKey') {\n              if (node.key.argument?.type === 'VIdentifier') {\n                if (CLASS_IDENTIFIER.includes(node.key.argument.name)) {\n                  const nodes = astHelpers.findAll(node, { type: 'Literal' })\n                  nodes.forEach((node) => {\n                    if (!['BinaryExpression', 'Property'].includes(node.parent?.type ?? '') && typeof node.value === 'string') {\n                      node.value = applyPrefix(node.value, config.tailwind.prefix)\n                      transformCount++\n                    }\n                  })\n                }\n              }\n            }\n            // handle class attribute without binding\n            else if (node.type === 'VLiteral' && typeof node.value === 'string') {\n              if (CLASS_IDENTIFIER.includes(node.parent.key.name)) {\n                node.value = `\"${applyPrefix(node.value.replace(/\"/g, ''), config.tailwind.prefix)}\"`\n                transformCount++\n              }\n            }\n          },\n          leaveNode() {\n\n          },\n        })\n      }\n\n      return transformCount\n    },\n  }\n}\n\nexport function applyPrefix(input: string, prefix: string = '') {\n  const classNames = input.split(' ')\n  const prefixed: string[] = []\n  for (const className of classNames) {\n    const [variant, value, modifier] = splitClassName(className)\n    if (variant) {\n      modifier\n        ? prefixed.push(`${variant}:${prefix}${value}/${modifier}`)\n        : prefixed.push(`${variant}:${prefix}${value}`)\n    }\n    else {\n      modifier\n        ? prefixed.push(`${prefix}${value}/${modifier}`)\n        : prefixed.push(`${prefix}${value}`)\n    }\n  }\n  return prefixed.join(' ')\n}\n\nexport function applyPrefixesCss(css: string, prefix: string) {\n  const lines = css.split('\\n')\n  for (const line of lines) {\n    if (line.includes('@apply')) {\n      const originalTWCls = line.replace('@apply', '').trim()\n      const prefixedTwCls = applyPrefix(originalTWCls, prefix)\n      css = css.replace(originalTWCls, prefixedTwCls)\n    }\n  }\n  return css\n}\n","import type { Config } from '@/src/utils/get-config'\nimport type { registryBaseColorSchema } from '@/src/utils/registry/schema'\nimport type * as z from 'zod'\nimport { transformCssVars } from '@/src/utils/transformers/transform-css-vars'\nimport { transformImport } from '@/src/utils/transformers/transform-import'\nimport { transformSFC } from '@/src/utils/transformers/transform-sfc'\nimport { transformTwPrefix } from '@/src/utils/transformers/transform-tw-prefix'\nimport { transform as metaTransform } from 'vue-metamorph'\n\nexport interface TransformOpts {\n  filename: string\n  raw: string\n  config: Config\n  baseColor?: z.infer<typeof registryBaseColorSchema>\n}\n\nexport async function transform(opts: TransformOpts) {\n  const source = await transformSFC(opts)\n\n  return metaTransform(source, opts.filename, [\n    transformImport(opts),\n    transformCssVars(opts),\n    transformTwPrefix(opts),\n  ]).code\n}\n","import type { Config } from '@/src/utils/get-config'\nimport type { registryIndexSchema } from '@/src/utils/registry/schema'\nimport { existsSync, promises as fs } from 'node:fs'\nimport process from 'node:process'\nimport { getConfig } from '@/src/utils/get-config'\nimport { handleError } from '@/src/utils/handle-error'\nimport {\n  fetchTree,\n  getItemTargetPath,\n  getRegistryBaseColor,\n  getRegistryIndex,\n} from '@/src/utils/registry'\nimport { transform } from '@/src/utils/transformers'\nimport { Command } from 'commander'\nimport { consola } from 'consola'\nimport { colors } from 'consola/utils'\nimport { type Change, diffLines } from 'diff'\nimport path from 'pathe'\nimport { z } from 'zod'\n\nconst updateOptionsSchema = z.object({\n  component: z.string().optional(),\n  yes: z.boolean(),\n  cwd: z.string(),\n  path: z.string().optional(),\n})\n\nexport const diff = new Command()\n  .name('diff')\n  .description('check for updates against the registry')\n  .argument('[component]', 'the component name')\n  .option('-y, --yes', 'skip confirmation prompt.', false)\n  .option(\n    '-c, --cwd <cwd>',\n    'the working directory. defaults to the current directory.',\n    process.cwd(),\n  )\n  .action(async (name, opts) => {\n    try {\n      const options = updateOptionsSchema.parse({\n        component: name,\n        ...opts,\n      })\n\n      const cwd = path.resolve(options.cwd)\n\n      if (!existsSync(cwd)) {\n        consola.error(`The path ${cwd} does not exist. Please try again.`)\n        process.exit(1)\n      }\n\n      const config = await getConfig(cwd)\n      if (!config) {\n        consola.warn(\n          `Configuration is missing. Please run ${colors.green(\n            'init',\n          )} to create a components.json file.`,\n        )\n        process.exit(1)\n      }\n\n      const registryIndex = await getRegistryIndex()\n\n      if (!options.component) {\n        const targetDir = config.resolvedPaths.components\n\n        // Find all components that exist in the project.\n        const projectComponents = registryIndex.filter((item) => {\n          for (const file of item.files) {\n            const filePath = path.resolve(targetDir, file)\n            if (existsSync(filePath))\n              return true\n          }\n\n          return false\n        })\n\n        // Check for updates.\n        const componentsWithUpdates = []\n        for (const component of projectComponents) {\n          const changes = await diffComponent(component, config)\n          if (changes.length) {\n            componentsWithUpdates.push({\n              name: component.name,\n              changes,\n            })\n          }\n        }\n\n        if (!componentsWithUpdates.length) {\n          consola.info('No updates found.')\n          process.exit(0)\n        }\n\n        consola.info('The following components have updates available:')\n        for (const component of componentsWithUpdates) {\n          consola.info(`- ${component.name}`)\n          for (const change of component.changes)\n            consola.info(`  - ${change.filePath}`)\n        }\n\n        consola.log('')\n        consola.info(\n          `Run ${colors.green('diff <component>')} to see the changes.`,\n        )\n        process.exit(0)\n      }\n\n      // Show diff for a single component.\n      const component = registryIndex.find(\n        item => item.name === options.component,\n      )\n\n      if (!component) {\n        consola.error(\n          `The component ${colors.green(options.component)} does not exist.`,\n        )\n        process.exit(1)\n      }\n\n      const changes = await diffComponent(component, config)\n\n      if (!changes.length) {\n        consola.info(`No updates found for ${options.component}.`)\n        process.exit(0)\n      }\n\n      for (const change of changes) {\n        consola.info(`- ${change.filePath}`)\n        printDiff(change.patch)\n        consola.log('')\n      }\n    }\n    catch (error) {\n      handleError(error)\n    }\n  })\n\nasync function diffComponent(\n  component: z.infer<typeof registryIndexSchema>[number],\n  config: Config,\n) {\n  const payload = await fetchTree(config.style, [component])\n  const baseColor = await getRegistryBaseColor(config.tailwind.baseColor)\n\n  const changes = []\n\n  for (const item of payload) {\n    const targetDir = await getItemTargetPath(config, item)\n\n    if (!targetDir)\n      continue\n\n    for (const file of item.files) {\n      const filePath = path.resolve(targetDir, file.name)\n\n      if (!existsSync(filePath))\n        continue\n\n      const fileContent = await fs.readFile(filePath, 'utf8')\n\n      const registryContent = await transform({\n        filename: file.name,\n        raw: file.content,\n        config,\n        baseColor,\n      })\n\n      const patch = diffLines(registryContent as string, fileContent)\n      if (patch.length > 1) {\n        changes.push({\n          file: file.name,\n          filePath,\n          patch,\n        })\n      }\n    }\n  }\n\n  return changes\n}\n\n// TODO: Does is it need to async?\nfunction printDiff(diff: Change[]) {\n  diff.forEach((part) => {\n    if (part) {\n      if (part.added)\n        return process.stdout.write(colors.green(part.value))\n\n      if (part.removed)\n        return process.stdout.write(colors.red(part.value))\n\n      return process.stdout.write(part.value)\n    }\n  })\n}\n","import { existsSync, promises as fs } from 'node:fs'\nimport process from 'node:process'\nimport { Command } from 'commander'\nimport { consola } from 'consola'\nimport { colors } from 'consola/utils'\nimport { template } from 'lodash-es'\nimport { addDependency } from 'nypm'\nimport ora from 'ora'\nimport path from 'pathe'\nimport prompts from 'prompts'\nimport { z } from 'zod'\nimport {\n  type Config,\n  DEFAULT_COMPONENTS,\n  DEFAULT_TAILWIND_CONFIG,\n  DEFAULT_UTILS,\n  getConfig,\n  rawConfigSchema,\n  resolveConfigPaths,\n  TAILWIND_CSS_PATH,\n} from '../utils/get-config'\nimport { getProjectInfo } from '../utils/get-project-info'\nimport { handleError } from '../utils/handle-error'\nimport {\n  getRegistryBaseColor,\n  getRegistryBaseColors,\n  getRegistryStyles,\n} from '../utils/registry'\nimport * as templates from '../utils/templates'\nimport { transformCJSToESM } from '../utils/transformers/transform-cjs-to-esm'\nimport { transformByDetype } from '../utils/transformers/transform-sfc'\nimport { applyPrefixesCss } from '../utils/transformers/transform-tw-prefix'\n\nconst PROJECT_DEPENDENCIES = {\n  base: [\n    'tailwindcss-animate',\n    'class-variance-authority',\n    'clsx',\n    'tailwind-merge',\n    'radix-vue',\n  ],\n}\n\nconst initOptionsSchema = z.object({\n  cwd: z.string(),\n  yes: z.boolean(),\n})\n\nexport const init = new Command()\n  .name('init')\n  .description('initialize your project and install dependencies')\n  .option('-y, --yes', 'skip confirmation prompt.', false)\n  .option(\n    '-c, --cwd <cwd>',\n    'the working directory. defaults to the current directory.',\n    process.cwd(),\n  )\n  .action(async (opts) => {\n    try {\n      const options = initOptionsSchema.parse(opts)\n      const cwd = path.resolve(options.cwd)\n\n      // Ensure target directory exists.\n      if (!existsSync(cwd)) {\n        consola.error(`The path ${cwd} does not exist. Please try again.`)\n        process.exit(1)\n      }\n\n      // Read config.\n      const existingConfig = await getConfig(cwd)\n      const config = await promptForConfig(cwd, existingConfig, options.yes)\n\n      await runInit(cwd, config)\n\n      consola.log('')\n      consola.info(\n        `${colors.green('Success!')} Project initialization completed.`,\n      )\n      consola.log('')\n    }\n    catch (error) {\n      handleError(error)\n    }\n  })\n\nexport async function promptForConfig(\n  cwd: string,\n  defaultConfig: Config | null = null,\n  skip = false,\n) {\n  const highlight = (text: string) => colors.cyan(text)\n\n  const styles = await getRegistryStyles()\n  const baseColors = await getRegistryBaseColors()\n\n  const options = await prompts([\n    {\n      type: 'toggle',\n      name: 'typescript',\n      message: `Would you like to use ${highlight('TypeScript')}? ${colors.gray('(recommended)')}?`,\n      initial: defaultConfig?.typescript ?? true,\n      active: 'yes',\n      inactive: 'no',\n    },\n    {\n      type: 'select',\n      name: 'framework',\n      message: `Which ${highlight('framework')} are you using?`,\n      choices: [\n        { title: 'Vite', value: 'vite' },\n        { title: 'Nuxt', value: 'nuxt' },\n        { title: 'Laravel', value: 'laravel' },\n        { title: 'Astro', value: 'astro' },\n      ],\n    },\n    {\n      type: 'select',\n      name: 'style',\n      message: `Which ${highlight('style')} would you like to use?`,\n      choices: styles.map(style => ({\n        title: style.label,\n        value: style.name,\n      })),\n    },\n    {\n      type: 'select',\n      name: 'tailwindBaseColor',\n      message: `Which color would you like to use as ${highlight(\n        'base color',\n      )}?`,\n      choices: baseColors.map(color => ({\n        title: color.label,\n        value: color.name,\n      })),\n    },\n    {\n      type: 'text',\n      name: 'tsConfigPath',\n      message: (prev, values) => `Where is your ${highlight(values.typescript ? 'tsconfig.json' : 'jsconfig.json')} file?`,\n      initial: (prev, values) => {\n        const prefix = values.framework === 'nuxt' ? '.nuxt/' : './'\n        const path = values.typescript ? 'tsconfig.json' : 'jsconfig.json'\n        return prefix + path\n      },\n    },\n    {\n      type: 'text',\n      name: 'tailwindCss',\n      message: `Where is your ${highlight('global CSS')} file? ${colors.gray('(this file will be overwritten)')}`,\n      initial: (prev, values) => defaultConfig?.tailwind.css ?? TAILWIND_CSS_PATH[values.framework as 'vite' | 'nuxt' | 'laravel' | 'astro'],\n    },\n    {\n      type: 'toggle',\n      name: 'tailwindCssVariables',\n      message: `Would you like to use ${highlight(\n        'CSS variables',\n      )} for colors?`,\n      initial: defaultConfig?.tailwind.cssVariables ?? true,\n      active: 'yes',\n      inactive: 'no',\n    },\n    {\n      type: 'text',\n      name: 'tailwindPrefix',\n      message: `Are you using a custom ${highlight(\n        'tailwind prefix eg. tw-',\n      )}? (Leave blank if not)`,\n      initial: '',\n    },\n    {\n      type: 'text',\n      name: 'tailwindConfig',\n      message: `Where is your ${highlight('tailwind.config')} located? ${colors.gray('(this file will be overwritten)')}`,\n      initial: (prev, values) => {\n        if (defaultConfig?.tailwind.config)\n          return defaultConfig?.tailwind.config\n        if (values.framework === 'astro')\n          return 'tailwind.config.mjs'\n        else return DEFAULT_TAILWIND_CONFIG\n      },\n    },\n    {\n      type: 'text',\n      name: 'components',\n      message: `Configure the import alias for ${highlight('components')}:`,\n      initial: defaultConfig?.aliases.components ?? DEFAULT_COMPONENTS,\n    },\n    {\n      type: 'text',\n      name: 'utils',\n      message: `Configure the import alias for ${highlight('utils')}:`,\n      initial: defaultConfig?.aliases.utils ?? DEFAULT_UTILS,\n    },\n  ])\n\n  const config = rawConfigSchema.parse({\n    $schema: 'https://shadcn-vue.com/schema.json',\n    style: options.style,\n    typescript: options.typescript,\n    tsConfigPath: options.tsConfigPath,\n    framework: options.framework,\n    tailwind: {\n      config: options.tailwindConfig,\n      css: options.tailwindCss,\n      baseColor: options.tailwindBaseColor,\n      cssVariables: options.tailwindCssVariables,\n      prefix: options.tailwindPrefix,\n    },\n    aliases: {\n      utils: options.utils,\n      components: options.components,\n    },\n  })\n\n  if (!skip) {\n    const { proceed } = await prompts({\n      type: 'confirm',\n      name: 'proceed',\n      message: `Write configuration to ${highlight('components.json')}. Proceed?`,\n      initial: true,\n    })\n\n    if (!proceed)\n      process.exit(0)\n  }\n\n  // Write to file.\n  consola.log('')\n  const spinner = ora('Writing components.json...').start()\n  const targetPath = path.resolve(cwd, 'components.json')\n  await fs.writeFile(targetPath, JSON.stringify(config, null, 2), 'utf8')\n  spinner.succeed()\n\n  return await resolveConfigPaths(cwd, config)\n}\n\nexport async function runInit(cwd: string, config: Config) {\n  const spinner = ora('Initializing project...')?.start()\n\n  // Check in in a Nuxt project.\n  const { isNuxt, shadcnNuxt } = await getProjectInfo()\n  if (isNuxt) {\n    consola.log('')\n    shadcnNuxt\n      ? consola.info(`Detected a Nuxt project with 'shadcn-nuxt' v${shadcnNuxt.version}...`)\n      : consola.warn(`Detected a Nuxt project without 'shadcn-nuxt' module. It's recommended to install it.`)\n  }\n\n  // Ensure all resolved paths directories exist.\n  for (const [key, resolvedPath] of Object.entries(config.resolvedPaths)) {\n    // Determine if the path is a file or directory.\n    // TODO: is there a better way to do this?\n    let dirname = path.extname(resolvedPath)\n      ? path.dirname(resolvedPath)\n      : resolvedPath\n\n    // If the utils alias is set to something like \"@/lib/utils\",\n    // assume this is a file and remove the \"utils\" file name.\n    // TODO: In future releases we should add support for individual utils.\n    if (key === 'utils' && resolvedPath.endsWith('/utils')) {\n      // Remove /utils at the end.\n      dirname = dirname.replace(/\\/utils$/, '')\n    }\n\n    if (!existsSync(dirname))\n      await fs.mkdir(dirname, { recursive: true })\n  }\n\n  const extension = config.typescript ? 'ts' : 'js'\n\n  // Write tailwind config.\n  await fs.writeFile(\n    config.resolvedPaths.tailwindConfig,\n    transformCJSToESM(\n      config.resolvedPaths.tailwindConfig,\n      config.tailwind.cssVariables\n        ? template(templates.TAILWIND_CONFIG_WITH_VARIABLES)({ extension, framework: config.framework, prefix: config.tailwind.prefix })\n        : template(templates.TAILWIND_CONFIG)({ extension, framework: config.framework, prefix: config.tailwind.prefix }),\n    ),\n    'utf8',\n  )\n\n  // Write css file.\n  const baseColor = await getRegistryBaseColor(config.tailwind.baseColor)\n  if (baseColor) {\n    await fs.writeFile(\n      config.resolvedPaths.tailwindCss,\n      config.tailwind.cssVariables\n        ? config.tailwind.prefix\n          ? applyPrefixesCss(baseColor.cssVarsTemplate, config.tailwind.prefix)\n          : baseColor.cssVarsTemplate\n        : baseColor.inlineColorsTemplate,\n      'utf8',\n    )\n  }\n\n  // Write cn file.\n  await fs.writeFile(\n    `${config.resolvedPaths.utils}.${extension}`,\n    extension === 'ts' ? templates.UTILS : await transformByDetype(templates.UTILS, '.ts'),\n    'utf8',\n  )\n\n  spinner?.succeed()\n\n  // Install dependencies.\n  const dependenciesSpinner = ora('Installing dependencies...')?.start()\n\n  const iconsDep = config.style === 'new-york' ? ['@radix-icons/vue'] : ['lucide-vue-next']\n  const deps = PROJECT_DEPENDENCIES.base.concat(iconsDep).filter(Boolean)\n\n  await addDependency(deps, {\n    cwd,\n    silent: true,\n  })\n\n  dependenciesSpinner?.succeed()\n}\n","import type { PackageJson } from 'pkg-types'\nimport { existsSync } from 'node:fs'\nimport fs from 'fs-extra'\nimport path from 'pathe'\nimport { readPackageJSON } from 'pkg-types'\n\nexport async function getProjectInfo() {\n  const info = {\n    tsconfig: null,\n    isNuxt: false,\n    shadcnNuxt: undefined,\n    isVueVite: false,\n    srcDir: false,\n    componentsUiDir: false,\n    srcComponentsUiDir: false,\n  }\n\n  try {\n    const tsconfig = await getTsConfig()\n\n    const isNuxt = existsSync(path.resolve('./nuxt.config.js')) || existsSync(path.resolve('./nuxt.config.ts'))\n    const shadcnNuxt = isNuxt ? await getShadcnNuxtInfo() : undefined\n\n    return {\n      tsconfig,\n      isNuxt,\n      shadcnNuxt,\n      isVueVite: existsSync(path.resolve('./vite.config.js')) || existsSync(path.resolve('./vite.config.ts')),\n      srcDir: existsSync(path.resolve('./src')),\n      srcComponentsUiDir: existsSync(path.resolve('./src/components/ui')),\n      componentsUiDir: existsSync(path.resolve('./components/ui')),\n    }\n  }\n  catch (error) {\n    return info\n  }\n}\n\nasync function getShadcnNuxtInfo() {\n  let nuxtModule: PackageJson | undefined\n  try {\n    nuxtModule = await readPackageJSON('shadcn-nuxt')\n  }\n  catch (error) {\n    nuxtModule = undefined\n  }\n\n  return nuxtModule\n}\n\nexport async function getTsConfig() {\n  try {\n    const tsconfigPath = path.join('tsconfig.json')\n    const tsconfig = await fs.readJSON(tsconfigPath)\n\n    if (!tsconfig)\n      throw new Error('tsconfig.json is missing')\n\n    return tsconfig\n  }\n  catch (error) {\n    return null\n  }\n}\n","export const UTILS = `import { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n`\n\nexport const TAILWIND_CONFIG = `const animate = require(\"tailwindcss-animate\")\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{<%- extension %>,<%- extension %>x,vue}',\n    './components/**/*.{<%- extension %>,<%- extension %>x,vue}',\n    './app/**/*.{<%- extension %>,<%- extension %>x,vue}',\n    './src/**/*.{<%- extension %>,<%- extension %>x,vue}',\n\t],\n  prefix: \"<%- prefix %>\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: 0 },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: 0 },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [animate],\n}`\n\nexport const TAILWIND_CONFIG_WITH_VARIABLES = `const animate = require(\"tailwindcss-animate\")\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: [\"class\"],\n  safelist: [\"dark\"],\n  prefix: \"<%- prefix %>\",\n  <% if (framework === 'vite') { %>\n  content: [\n    './pages/**/*.{<%- extension %>,<%- extension %>x,vue}',\n    './components/**/*.{<%- extension %>,<%- extension %>x,vue}',\n    './app/**/*.{<%- extension %>,<%- extension %>x,vue}',\n    './src/**/*.{<%- extension %>,<%- extension %>x,vue}',\n\t],\n  <% } else if (framework === 'laravel') { %>\n  content: [\n    \"./vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php\",\n    \"./storage/framework/views/*.php\",\n    \"./resources/views/**/*.blade.php\",\n    \"./resources/js/**/*.{<%- extension %>,<%- extension %>x,vue}\",\n  ],\n  <% } else if (framework === 'astro') { %>\n    content: [\n      './src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}',\n    ],\n  <% } %>\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        xl: \"calc(var(--radius) + 4px)\",\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: 0 },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: 0 },\n        },\n        \"collapsible-down\": {\n          from: { height: 0 },\n          to: { height: 'var(--radix-collapsible-content-height)' },\n        },\n        \"collapsible-up\": {\n          from: { height: 'var(--radix-collapsible-content-height)' },\n          to: { height: 0 },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"collapsible-down\": \"collapsible-down 0.2s ease-in-out\",\n        \"collapsible-up\": \"collapsible-up 0.2s ease-in-out\",\n      },\n    },\n  },\n  plugins: [animate],\n}`\n","export function transformCJSToESM(filename: string, code: string) {\n  if (filename.endsWith('.mjs')) {\n    return code\n      .replace(/const\\s(\\w+)\\s*=\\s*require\\((.*)\\);?/g, 'import $1 from $2')\n      .replace(/module\\.exports = /g, 'export default ')\n  }\n  return code\n}\n","import type { PackageJson } from 'type-fest'\nimport { fileURLToPath } from 'node:url'\nimport fs from 'fs-extra'\nimport path from 'pathe'\n\nexport function getPackageInfo() {\n  const packageJsonPath = getPackageFilePath('../package.json')\n\n  return fs.readJSONSync(packageJsonPath) as PackageJson\n}\n\nfunction getPackageFilePath(filePath: string) {\n  const distPath = fileURLToPath(new URL('.', import.meta.url))\n\n  return path.resolve(distPath, filePath)\n}\n"],"mappings":"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","names":["process","existsSync","process","process","z","consola","path","process","entry","index","path","prefix","path","path","node","nodes","transform","consola","path","z","process","existsSync","components","transform","existsSync","fs","process","Command","consola","colors","path","z","process","existsSync","component","changes","fs","transform","diff","existsSync","fs","process","Command","consola","colors","addDependency","ora","path","prompts","z","existsSync","fs","path","z","Command","process","path","existsSync","consola","colors","prompts","ora","fs","addDependency","fs","path","Command","process"]}